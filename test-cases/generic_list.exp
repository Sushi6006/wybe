======================================================================
AFTER EVERYTHING:
 Module generic_list
  representation  : (not a type)
  public submods  : list -> generic_list.list
  public resources: 
  public procs    : generic_list.list.[]<0>
                    generic_list.list.[|]<0>
                    generic_list.list.[|]<1>
                    generic_list.list.head<0>
                    generic_list.list.head<1>
                    generic_list.list.tail<0>
                    generic_list.list.tail<1>
  imports         : public use generic_list.list
                    use wybe
  resources       : 
  known types     : bool: wybe.bool
                    char: wybe.char
                    float: wybe.float
                    int: wybe.int
                    list: generic_list.list
                    phantom: wybe.phantom
                    string: wybe.string
  submodules      : generic_list.list
  procs           : 


  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    
--------------------------------------------------
 Module generic_list.list(t)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.list.[]<0>
                    generic_list.list.[|]<0>
                    generic_list.list.[|]<1>
                    generic_list.list.head<0>
                    generic_list.list.head<1>
                    generic_list.list.tail<0>
                    generic_list.list.tail<1>
  imports         : use generic_list
                    use wybe
  resources       : 
  known types     : bool: wybe.bool
                    char: wybe.char
                    float: wybe.float
                    int: wybe.int
                    list: generic_list.list
                    phantom: wybe.phantom
                    string: wybe.string
  procs           : 

[] > public inline (0 calls)
0: [](?$#0:generic_list.list(t)): AliasPairs: []
    foreign llvm move(0:generic_list.list(t), ?$#0:generic_list.list(t))


[|] > public inline (0 calls)
0: [|](head#0:t, tail#0:generic_list.list(t), ?$#0:generic_list.list(t)): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!generic_list.list(t))
    foreign lpvm mutate(~%$rec#0:generic_list.list(t), ?%$rec#1:generic_list.list(t), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:t)
    foreign lpvm mutate(~%$rec#1:generic_list.list(t), ?%$#0:generic_list.list(t), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:generic_list.list(t))
[|] > public inline test (0 calls)
1: [|](?head#0:t, ?tail#0:generic_list.list(t), $#0:generic_list.list(t), ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($#0:generic_list.list(t), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:generic_list.list(t), 0:wybe.int, ?head#0:t)
        foreign lpvm access(~$#0:generic_list.list(t), 8:wybe.int, ?tail#0:generic_list.list(t))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



head > public inline test (0 calls)
0: head($rec#0:generic_list.list(t), ?$#0:t, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list.list(t), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:generic_list.list(t), 0:wybe.int, ?$#0:t)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public inline test (0 calls)
1: head($rec#0:generic_list.list(t), ?$rec#1:generic_list.list(t), $field#0:t, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list.list(t), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list.list(t), ?$rec#1:generic_list.list(t))

    1:
        foreign lpvm mutate(~%$rec#0:generic_list.list(t), ?%$rec#1:generic_list.list(t), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:t)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



tail > public inline test (0 calls)
0: tail($rec#0:generic_list.list(t), ?$#0:generic_list.list(t), ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list.list(t), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:generic_list.list(t), 8:wybe.int, ?$#0:generic_list.list(t))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public inline test (0 calls)
1: tail($rec#0:generic_list.list(t), ?$rec#1:generic_list.list(t), $field#0:generic_list.list(t), ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list.list(t), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list.list(t), ?$rec#1:generic_list.list(t))

    1:
        foreign lpvm mutate noalias(~%$rec#0:generic_list.list(t), ?%$rec#1:generic_list.list(t), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:generic_list.list(t))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'generic_list.list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i64 @"generic_list.list.[]<0>"()    {
entry:
  ret i64 0 
}


define external ccc  i64 @"generic_list.list.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"head#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"tail#0", i64* %8 
  ret i64 %3 
}


define external ccc  {i64, i64, i1} @"generic_list.list.[|]<1>"(i64  %"$#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %9 = inttoptr i64 %"$#0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"$#0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = insertvalue {i64, i64, i1} undef, i64 %11, 0 
  %17 = insertvalue {i64, i64, i1} %16, i64 %15, 1 
  %18 = insertvalue {i64, i64, i1} %17, i1 1, 2 
  ret {i64, i64, i1} %18 
if.else:
  %19 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %20 = insertvalue {i64, i64, i1} %19, i64 undef, 1 
  %21 = insertvalue {i64, i64, i1} %20, i1 0, 2 
  ret {i64, i64, i1} %21 
}


define external ccc  {i64, i1} @"generic_list.list.head<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %22 = inttoptr i64 %"$rec#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = insertvalue {i64, i1} undef, i64 %24, 0 
  %26 = insertvalue {i64, i1} %25, i1 1, 1 
  ret {i64, i1} %26 
if.else:
  %27 = insertvalue {i64, i1} undef, i64 undef, 0 
  %28 = insertvalue {i64, i1} %27, i1 0, 1 
  ret {i64, i1} %28 
}


define external ccc  {i64, i1} @"generic_list.list.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i8* 
  %33 = inttoptr i64 %"$rec#0" to i8* 
  %34 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %32, i8*  %33, i32  %34, i32  8, i1  0)  
  %35 = inttoptr i64 %31 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 %"$field#0", i64* %36 
  %37 = insertvalue {i64, i1} undef, i64 %31, 0 
  %38 = insertvalue {i64, i1} %37, i1 1, 1 
  ret {i64, i1} %38 
if.else:
  %39 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %40 = insertvalue {i64, i1} %39, i1 0, 1 
  ret {i64, i1} %40 
}


define external ccc  {i64, i1} @"generic_list.list.tail<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %41 = add   i64 %"$rec#0", 8 
  %42 = inttoptr i64 %41 to i64* 
  %43 = getelementptr  i64, i64* %42, i64 0 
  %44 = load  i64, i64* %43 
  %45 = insertvalue {i64, i1} undef, i64 %44, 0 
  %46 = insertvalue {i64, i1} %45, i1 1, 1 
  ret {i64, i1} %46 
if.else:
  %47 = insertvalue {i64, i1} undef, i64 undef, 0 
  %48 = insertvalue {i64, i1} %47, i1 0, 1 
  ret {i64, i1} %48 
}


define external ccc  {i64, i1} @"generic_list.list.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %49 = trunc i64 16 to i32  
  %50 = tail call ccc  i8*  @wybe_malloc(i32  %49)  
  %51 = ptrtoint i8* %50 to i64 
  %52 = inttoptr i64 %51 to i8* 
  %53 = inttoptr i64 %"$rec#0" to i8* 
  %54 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %52, i8*  %53, i32  %54, i32  8, i1  0)  
  %55 = add   i64 %51, 8 
  %56 = inttoptr i64 %55 to i64* 
  %57 = getelementptr  i64, i64* %56, i64 0 
  store  i64 %"$field#0", i64* %57 
  %58 = insertvalue {i64, i1} undef, i64 %51, 0 
  %59 = insertvalue {i64, i1} %58, i1 1, 1 
  ret {i64, i1} %59 
if.else:
  %60 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %61 = insertvalue {i64, i1} %60, i1 0, 1 
  ret {i64, i1} %61 
}
======================================================================
