======================================================================
AFTER EVERYTHING:
 Module generic_list(@ty)
  representation  : address
  public submods  : 
  public resources: 
  public procs    : generic_list.[]<0>
                    generic_list.[|]<0>
                    generic_list.[|]<1>
                    generic_list.append<0>
                    generic_list.head<0>
                    generic_list.head<1>
                    generic_list.length<0>
                    generic_list.tail<0>
                    generic_list.tail<1>
  imports         : use wybe
  resources       : 
  known types     : bool: wybe.bool
                    char: wybe.char
                    float: wybe.float
                    generic_list: generic_list
                    int: wybe.int
                    phantom: wybe.phantom
                    string: wybe.string
  procs           : 

[] > public inline (0 calls)
0: [](?$#0:generic_list(@ty)): AliasPairs: []
    foreign llvm move(0:generic_list(@ty), ?$#0:generic_list(@ty))


[|] > public inline (1 calls)
0: [|](head#0:@ty, tail#0:generic_list(@ty), ?$#0:generic_list(@ty)): AliasPairs: []
    foreign lpvm alloc(16:wybe.int, ?$rec#0:!generic_list(@ty))
    foreign lpvm mutate(~%$rec#0:generic_list(@ty), ?%$rec#1:generic_list(@ty), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:@ty)
    foreign lpvm mutate(~%$rec#1:generic_list(@ty), ?%$#0:generic_list(@ty), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tail#0:generic_list(@ty))
[|] > public inline test (6 calls)
1: [|](?head#0:@ty, ?tail#0:generic_list(@ty), $#0:generic_list(@ty), ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($#0:generic_list(@ty), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access($#0:generic_list(@ty), 0:wybe.int, ?head#0:@ty)
        foreign lpvm access(~$#0:generic_list(@ty), 8:wybe.int, ?tail#0:generic_list(@ty))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



append > public (1 calls)
0: append(a#0:generic_list(@ty), b#0:generic_list(@ty), ?$#0:generic_list(@ty)): AliasPairs: [($#0,b#0)]
    foreign llvm icmp ne(a#0:generic_list(@ty), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~b#0:generic_list(@ty), ?$#0:generic_list(@ty)) @generic_list:8:5

    1:
        foreign lpvm access(a#0:generic_list(@ty), 0:wybe.int, ?head#0:@ty)
        foreign lpvm access(~a#0:generic_list(@ty), 8:wybe.int, ?tail#0:generic_list(@ty))
        generic_list.append<0>(~tail#0:generic_list(@ty), ~b#0:generic_list(@ty), ?tmp$2#0:generic_list(@ty)) @generic_list:9:39
        foreign lpvm alloc(16:wybe.int, ?tmp$8#0:generic_list(@ty))
        foreign lpvm mutate(~tmp$8#0:generic_list(@ty), ?tmp$9#0:generic_list(@ty), 0:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~head#0:@ty)
        foreign lpvm mutate(~tmp$9#0:generic_list(@ty), ?$#0:generic_list(@ty), 8:wybe.int, 1:wybe.int, 16:wybe.int, 0:wybe.int, ~tmp$2#0:generic_list(@ty))



head > public inline test (0 calls)
0: head($rec#0:generic_list(@ty), ?$#0:@ty, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list(@ty), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:generic_list(@ty), 0:wybe.int, ?$#0:@ty)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

head > public inline test (0 calls)
1: head($rec#0:generic_list(@ty), ?$rec#1:generic_list(@ty), $field#0:@ty, ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list(@ty), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(@ty), ?$rec#1:generic_list(@ty))

    1:
        foreign lpvm mutate(~%$rec#0:generic_list(@ty), ?%$rec#1:generic_list(@ty), 0:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:@ty)
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)



length > public inline (0 calls)
0: length(list#0:generic_list(@ty), ?$#0:wybe.int): AliasPairs: []
    generic_list.length1<0>(~list#0:generic_list(@ty), 0:wybe.int, ?$#0:wybe.int) @generic_list:4:48


length1 > (2 calls)
0: length1(list#0:generic_list(@ty), acc#0:wybe.int, ?$#0:wybe.int): AliasPairs: []
    foreign llvm icmp ne(list#0:generic_list(@ty), 0:wybe.int, ?tmp$5#0:wybe.bool)
    case ~tmp$5#0:wybe.bool of
    0:
        foreign llvm move(~acc#0:wybe.int, ?$#0:wybe.int) @generic_list:5:1

    1:
        foreign lpvm access(~list#0:generic_list(@ty), 8:wybe.int, ?tail#0:generic_list(@ty))
        foreign llvm add(~acc#0:wybe.int, 1:wybe.int, ?tmp$2#0:wybe.int) @wybe:nn:nn
        generic_list.length1<0>(~tail#0:generic_list(@ty), ~tmp$2#0:wybe.int, ?$#0:wybe.int) @generic_list:6:36



tail > public inline test (0 calls)
0: tail($rec#0:generic_list(@ty), ?$#0:generic_list(@ty), ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list(@ty), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)

    1:
        foreign lpvm access(~$rec#0:generic_list(@ty), 8:wybe.int, ?$#0:generic_list(@ty))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)

tail > public inline test (0 calls)
1: tail($rec#0:generic_list(@ty), ?$rec#1:generic_list(@ty), $field#0:generic_list(@ty), ?$$#0:wybe.bool): AliasPairs: []
    foreign llvm icmp ne($rec#0:generic_list(@ty), 0:wybe.int, ?tmp$0#0:wybe.bool)
    case ~tmp$0#0:wybe.bool of
    0:
        foreign llvm move(0:wybe.bool, ?$$#0:wybe.bool)
        foreign llvm move(~$rec#0:generic_list(@ty), ?$rec#1:generic_list(@ty))

    1:
        foreign lpvm mutate noalias(~%$rec#0:generic_list(@ty), ?%$rec#1:generic_list(@ty), 8:wybe.int, 0:wybe.int, 16:wybe.int, 0:wybe.int, ~$field#0:generic_list(@ty))
        foreign llvm move(1:wybe.bool, ?$$#0:wybe.bool)


  LLVM code       :

; ModuleID = 'generic_list'


 


declare external ccc  i8* @wybe_malloc(i32)    


declare external ccc  void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1)    


define external ccc  i64 @"generic_list.[]<0>"()    {
entry:
  ret i64 0 
}


define external ccc  i64 @"generic_list.[|]<0>"(i64  %"head#0", i64  %"tail#0")    {
entry:
  %1 = trunc i64 16 to i32  
  %2 = tail call ccc  i8*  @wybe_malloc(i32  %1)  
  %3 = ptrtoint i8* %2 to i64 
  %4 = inttoptr i64 %3 to i64* 
  %5 = getelementptr  i64, i64* %4, i64 0 
  store  i64 %"head#0", i64* %5 
  %6 = add   i64 %3, 8 
  %7 = inttoptr i64 %6 to i64* 
  %8 = getelementptr  i64, i64* %7, i64 0 
  store  i64 %"tail#0", i64* %8 
  ret i64 %3 
}


define external ccc  {i64, i64, i1} @"generic_list.[|]<1>"(i64  %"$#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %9 = inttoptr i64 %"$#0" to i64* 
  %10 = getelementptr  i64, i64* %9, i64 0 
  %11 = load  i64, i64* %10 
  %12 = add   i64 %"$#0", 8 
  %13 = inttoptr i64 %12 to i64* 
  %14 = getelementptr  i64, i64* %13, i64 0 
  %15 = load  i64, i64* %14 
  %16 = insertvalue {i64, i64, i1} undef, i64 %11, 0 
  %17 = insertvalue {i64, i64, i1} %16, i64 %15, 1 
  %18 = insertvalue {i64, i64, i1} %17, i1 1, 2 
  ret {i64, i64, i1} %18 
if.else:
  %19 = insertvalue {i64, i64, i1} undef, i64 undef, 0 
  %20 = insertvalue {i64, i64, i1} %19, i64 undef, 1 
  %21 = insertvalue {i64, i64, i1} %20, i1 0, 2 
  ret {i64, i64, i1} %21 
}


define external ccc  i64 @"generic_list.append<0>"(i64  %"a#0", i64  %"b#0")    {
entry:
  %"tmp$5#0" = icmp ne i64 %"a#0", 0 
  br i1 %"tmp$5#0", label %if.then, label %if.else 
if.then:
  %22 = inttoptr i64 %"a#0" to i64* 
  %23 = getelementptr  i64, i64* %22, i64 0 
  %24 = load  i64, i64* %23 
  %25 = add   i64 %"a#0", 8 
  %26 = inttoptr i64 %25 to i64* 
  %27 = getelementptr  i64, i64* %26, i64 0 
  %28 = load  i64, i64* %27 
  %"tmp$2#0" = tail call ccc  i64  @"generic_list.append<0>"(i64  %28, i64  %"b#0")  
  %29 = trunc i64 16 to i32  
  %30 = tail call ccc  i8*  @wybe_malloc(i32  %29)  
  %31 = ptrtoint i8* %30 to i64 
  %32 = inttoptr i64 %31 to i64* 
  %33 = getelementptr  i64, i64* %32, i64 0 
  store  i64 %24, i64* %33 
  %34 = add   i64 %31, 8 
  %35 = inttoptr i64 %34 to i64* 
  %36 = getelementptr  i64, i64* %35, i64 0 
  store  i64 %"tmp$2#0", i64* %36 
  ret i64 %31 
if.else:
  ret i64 %"b#0" 
}


define external ccc  {i64, i1} @"generic_list.head<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %37 = inttoptr i64 %"$rec#0" to i64* 
  %38 = getelementptr  i64, i64* %37, i64 0 
  %39 = load  i64, i64* %38 
  %40 = insertvalue {i64, i1} undef, i64 %39, 0 
  %41 = insertvalue {i64, i1} %40, i1 1, 1 
  ret {i64, i1} %41 
if.else:
  %42 = insertvalue {i64, i1} undef, i64 undef, 0 
  %43 = insertvalue {i64, i1} %42, i1 0, 1 
  ret {i64, i1} %43 
}


define external ccc  {i64, i1} @"generic_list.head<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %44 = trunc i64 16 to i32  
  %45 = tail call ccc  i8*  @wybe_malloc(i32  %44)  
  %46 = ptrtoint i8* %45 to i64 
  %47 = inttoptr i64 %46 to i8* 
  %48 = inttoptr i64 %"$rec#0" to i8* 
  %49 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %47, i8*  %48, i32  %49, i32  8, i1  0)  
  %50 = inttoptr i64 %46 to i64* 
  %51 = getelementptr  i64, i64* %50, i64 0 
  store  i64 %"$field#0", i64* %51 
  %52 = insertvalue {i64, i1} undef, i64 %46, 0 
  %53 = insertvalue {i64, i1} %52, i1 1, 1 
  ret {i64, i1} %53 
if.else:
  %54 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %55 = insertvalue {i64, i1} %54, i1 0, 1 
  ret {i64, i1} %55 
}


define external ccc  i64 @"generic_list.length<0>"(i64  %"list#0")    {
entry:
  %"$#0" = tail call ccc  i64  @"generic_list.length1<0>"(i64  %"list#0", i64  0)  
  ret i64 %"$#0" 
}


define external ccc  i64 @"generic_list.length1<0>"(i64  %"list#0", i64  %"acc#0")    {
entry:
  %"tmp$5#0" = icmp ne i64 %"list#0", 0 
  br i1 %"tmp$5#0", label %if.then, label %if.else 
if.then:
  %56 = add   i64 %"list#0", 8 
  %57 = inttoptr i64 %56 to i64* 
  %58 = getelementptr  i64, i64* %57, i64 0 
  %59 = load  i64, i64* %58 
  %"tmp$2#0" = add   i64 %"acc#0", 1 
  %"$#0" = tail call ccc  i64  @"generic_list.length1<0>"(i64  %59, i64  %"tmp$2#0")  
  ret i64 %"$#0" 
if.else:
  ret i64 %"acc#0" 
}


define external ccc  {i64, i1} @"generic_list.tail<0>"(i64  %"$rec#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %60 = add   i64 %"$rec#0", 8 
  %61 = inttoptr i64 %60 to i64* 
  %62 = getelementptr  i64, i64* %61, i64 0 
  %63 = load  i64, i64* %62 
  %64 = insertvalue {i64, i1} undef, i64 %63, 0 
  %65 = insertvalue {i64, i1} %64, i1 1, 1 
  ret {i64, i1} %65 
if.else:
  %66 = insertvalue {i64, i1} undef, i64 undef, 0 
  %67 = insertvalue {i64, i1} %66, i1 0, 1 
  ret {i64, i1} %67 
}


define external ccc  {i64, i1} @"generic_list.tail<1>"(i64  %"$rec#0", i64  %"$field#0")    {
entry:
  %"tmp$0#0" = icmp ne i64 %"$rec#0", 0 
  br i1 %"tmp$0#0", label %if.then, label %if.else 
if.then:
  %68 = trunc i64 16 to i32  
  %69 = tail call ccc  i8*  @wybe_malloc(i32  %68)  
  %70 = ptrtoint i8* %69 to i64 
  %71 = inttoptr i64 %70 to i8* 
  %72 = inttoptr i64 %"$rec#0" to i8* 
  %73 = trunc i64 16 to i32  
  tail call ccc  void  @llvm.memcpy.p0i8.p0i8.i32(i8*  %71, i8*  %72, i32  %73, i32  8, i1  0)  
  %74 = add   i64 %70, 8 
  %75 = inttoptr i64 %74 to i64* 
  %76 = getelementptr  i64, i64* %75, i64 0 
  store  i64 %"$field#0", i64* %76 
  %77 = insertvalue {i64, i1} undef, i64 %70, 0 
  %78 = insertvalue {i64, i1} %77, i1 1, 1 
  ret {i64, i1} %78 
if.else:
  %79 = insertvalue {i64, i1} undef, i64 %"$rec#0", 0 
  %80 = insertvalue {i64, i1} %79, i1 0, 1 
  ret {i64, i1} %80 
}
======================================================================
